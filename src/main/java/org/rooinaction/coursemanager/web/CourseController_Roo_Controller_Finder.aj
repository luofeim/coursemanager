// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.rooinaction.coursemanager.web;

import java.util.Date;
import org.rooinaction.coursemanager.model.Course;
import org.rooinaction.coursemanager.model.CourseTypeEnum;
import org.rooinaction.coursemanager.web.CourseController;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect CourseController_Roo_Controller_Finder {
    
    @RequestMapping(params = { "find=ByCourseTypeAndRunDateBetween", "form" }, method = RequestMethod.GET)
    public String CourseController.findCoursesByCourseTypeAndRunDateBetweenForm(Model uiModel) {
        uiModel.addAttribute("coursetypeenums", java.util.Arrays.asList(CourseTypeEnum.class.getEnumConstants()));
        addDateTimeFormatPatterns(uiModel);
        return "courses/findCoursesByCourseTypeAndRunDateBetween";
    }
    
    @RequestMapping(params = "find=ByCourseTypeAndRunDateBetween", method = RequestMethod.GET)
    public String CourseController.findCoursesByCourseTypeAndRunDateBetween(@RequestParam("courseType") CourseTypeEnum courseType, @RequestParam("minRunDate") @DateTimeFormat(pattern = "MM/dd/yyyy") Date minRunDate, @RequestParam("maxRunDate") @DateTimeFormat(pattern = "MM/dd/yyyy") Date maxRunDate, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("courses", Course.findCoursesByCourseTypeAndRunDateBetween(courseType, minRunDate, maxRunDate, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Course.countFindCoursesByCourseTypeAndRunDateBetween(courseType, minRunDate, maxRunDate) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("courses", Course.findCoursesByCourseTypeAndRunDateBetween(courseType, minRunDate, maxRunDate, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "courses/list";
    }
    
    @RequestMapping(params = { "find=ByNameLike", "form" }, method = RequestMethod.GET)
    public String CourseController.findCoursesByNameLikeForm(Model uiModel) {
        return "courses/findCoursesByNameLike";
    }
    
    @RequestMapping(params = "find=ByNameLike", method = RequestMethod.GET)
    public String CourseController.findCoursesByNameLike(@RequestParam("name") String name, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("courses", Course.findCoursesByNameLike(name, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Course.countFindCoursesByNameLike(name) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("courses", Course.findCoursesByNameLike(name, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "courses/list";
    }
    
}
